<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="ru">
  <compounddef id="blockinfo__tester_8cpp" kind="file" language="C++">
    <compoundname>blockinfo_tester.cpp</compoundname>
    <includes refid="blockinfo__tester_8hpp" local="no">blockinfo_tester/blockinfo_tester.hpp</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">vector</includes>
    <includes local="no">eosio/action.hpp</includes>
    <includes local="no">eosio/check.hpp</includes>
    <includes local="no">eosio/datastream.hpp</includes>
    <includes local="no">eosio/name.hpp</includes>
    <includes local="no">eosio/print.hpp</includes>
    <incdepgraph>
      <node id="5">
        <label>eosio.system/block_info.hpp</label>
        <link refid="block__info_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>blockinfo_tester/blockinfo_tester.hpp</label>
        <link refid="blockinfo__tester_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>system/contracts/test_contracts/blockinfo_tester/src/blockinfo_tester.cpp</label>
        <link refid="blockinfo__tester_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cstdint</label>
      </node>
      <node id="14">
        <label>eosio/action.hpp</label>
      </node>
      <node id="15">
        <label>eosio/check.hpp</label>
      </node>
      <node id="16">
        <label>eosio/datastream.hpp</label>
      </node>
      <node id="6">
        <label>eosio/multi_index.hpp</label>
      </node>
      <node id="7">
        <label>eosio/name.hpp</label>
      </node>
      <node id="17">
        <label>eosio/print.hpp</label>
      </node>
      <node id="3">
        <label>eosio/time.hpp</label>
      </node>
      <node id="4">
        <label>eosio/varint.hpp</label>
      </node>
      <node id="8">
        <label>limits</label>
      </node>
      <node id="9">
        <label>optional</label>
      </node>
      <node id="12">
        <label>type_traits</label>
      </node>
      <node id="11">
        <label>variant</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceanonymous__namespace_02blockinfo__tester_8cpp_03">anonymous_namespace{blockinfo_tester.cpp}</innernamespace>
    <innernamespace refid="namespacesystem__contracts">system_contracts</innernamespace>
    <innernamespace refid="namespacesystem__contracts_1_1testing">system_contracts::testing</innernamespace>
    <innernamespace refid="namespacesystem__contracts_1_1testing_1_1test__contracts">system_contracts::testing::test_contracts</innernamespace>
    <innernamespace refid="namespacesystem__contracts_1_1testing_1_1test__contracts_1_1blockinfo__tester">system_contracts::testing::test_contracts::blockinfo_tester</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="blockinfo__tester_8cpp_1a979735e53c71ba52bb8515d2c4437059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>C void</type>
        <definition>C void apply</definition>
        <argsstring>(uint64_t receiver, uint64_t code, uint64_t action)</argsstring>
        <name>apply</name>
        <param>
          <type>uint64_t</type>
          <declname>receiver</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="system/contracts/test_contracts/blockinfo_tester/src/blockinfo_tester.cpp" line="47" column="16" bodyfile="system/contracts/test_contracts/blockinfo_tester/src/blockinfo_tester.cpp" bodystart="47" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="blockinfo__tester_8hpp" kindref="compound">blockinfo_tester/blockinfo_tester.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eosio/action.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eosio/check.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eosio/datastream.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eosio/name.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eosio/print.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="namespaceanonymous__namespace_02blockinfo__tester_8cpp_03" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeosiosystem_1_1block__info" kindref="compound">block_info</ref><sp/>=<sp/><ref refid="namespaceeosiosystem_1_1block__info" kindref="compound">eosiosystem::block_info</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesystem__contracts_1_1testing_1_1test__contracts_1_1blockinfo__tester" kindref="compound">system_contracts::testing::test_contracts::blockinfo_tester</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacesystem__contracts_1_1testing_1_1test__contracts_1_1blockinfo__tester_1a705f35a783c6830287ee92b4f8146d49" kindref="member">process</ref>(<ref refid="namespaceeosiosystem_1_1block__info_1a2874613dc8993ab1cc70301c121823c6" kindref="member">get_latest_block_batch_info</ref><sp/><ref refid="structrequest" kindref="compound">request</ref>)<sp/>-&gt;<sp/>latest_block_batch_info_result</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/>latest_block_batch_info_result<sp/>response;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><ref refid="structeosiosystem_1_1block__info_1_1latest__block__batch__info__result" kindref="compound">block_info::latest_block_batch_info_result</ref><sp/>res<sp/>=</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceeosiosystem_1_1block__info_1a2874613dc8993ab1cc70301c121823c6" kindref="member">block_info::get_latest_block_batch_info</ref>(<ref refid="structrequest" kindref="compound">request</ref>.batch_start_height_offset,<sp/><ref refid="structrequest" kindref="compound">request</ref>.batch_size);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/>response.result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::move(res.<ref refid="structeosiosystem_1_1block__info_1_1latest__block__batch__info__result_1ad6bb99259a46f73549ee37819affcc1a" kindref="member">result</ref>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/>response.error_code.value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(res.<ref refid="structeosiosystem_1_1block__info_1_1latest__block__batch__info__result_1ae64b5eb7efe7ddafb9aa3e260dc4fa8e" kindref="member">error_code</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/>eosio::print(</highlight><highlight class="stringliteral">&quot;get_latest_block_batch_info:<sp/>response<sp/>error_code<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>response.error_code.value,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(response.result.has_value())<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>result<sp/>=<sp/>*response.result;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio::print(</highlight><highlight class="stringliteral">&quot;get_latest_block_batch_info:<sp/>response<sp/>result:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio::print(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>batch_start_height<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>result.batch_start_height,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio::print(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>batch_current_end_height<sp/><sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>result.batch_current_end_height,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>response;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="namespacesystem__contracts_1_1testing_1_1test__contracts_1_1blockinfo__tester_1a78d9b5e57a0feb8412c06a95236fb12f" kindref="member">output_type</ref><sp/><ref refid="namespacesystem__contracts_1_1testing_1_1test__contracts_1_1blockinfo__tester_1a363d3c4aeaaf0d43dc7d2c8b36f35ed6" kindref="member">process_call</ref>(<ref refid="namespacesystem__contracts_1_1testing_1_1test__contracts_1_1blockinfo__tester_1a401279c7208232bcb2a66175b597ba44" kindref="member">input_type</ref><sp/>input)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::visit([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>arg)<sp/>-&gt;<sp/><ref refid="namespacesystem__contracts_1_1testing_1_1test__contracts_1_1blockinfo__tester_1a78d9b5e57a0feb8412c06a95236fb12f" kindref="member">output_type</ref><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesystem__contracts_1_1testing_1_1test__contracts_1_1blockinfo__tester_1a705f35a783c6830287ee92b4f8146d49" kindref="member">process</ref>(std::move(arg));<sp/>},<sp/>std::move(input));</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>system_contracts::testing::test_contracts::blockinfo_tester</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">[[eosio::wasm_entry]]<sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="blockinfo__tester_8cpp_1a979735e53c71ba52bb8515d2c4437059" kindref="member">apply</ref>(uint64_t<sp/>receiver,<sp/>uint64_t<sp/>code,<sp/>uint64_t<sp/>action)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ns<sp/>=<sp/><ref refid="namespacesystem__contracts_1_1testing_1_1test__contracts_1_1blockinfo__tester" kindref="compound">system_contracts::testing::test_contracts::blockinfo_tester</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(receiver<sp/>==<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;call&quot;</highlight><highlight class="normal">_n.value)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesystem__contracts_1_1testing_1_1test__contracts_1_1blockinfo__tester_1a401279c7208232bcb2a66175b597ba44" kindref="member">ns::input_type</ref><sp/>input;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>buffer;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer.resize(eosio::action_data_size());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eosio::read_action_data(buffer.data(),<sp/>buffer.size());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eosio::datastream&lt;const<sp/>char*&gt;<sp/>input_ds(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffer.data()),<sp/>buffer.size());</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_ds<sp/>&gt;&gt;<sp/>input;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output<sp/>=<sp/><ref refid="namespacesystem__contracts_1_1testing_1_1test__contracts_1_1blockinfo__tester_1a363d3c4aeaaf0d43dc7d2c8b36f35ed6" kindref="member">ns::process_call</ref>(std::move(input));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_same_v&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(output),<sp/><ref refid="namespacesystem__contracts_1_1testing_1_1test__contracts_1_1blockinfo__tester_1a78d9b5e57a0feb8412c06a95236fb12f" kindref="member">ns::output_type</ref>&gt;);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eosio::action<sp/>return_action;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_action.account<sp/>=<sp/>eosio::name{receiver};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_action.name<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;return&quot;</highlight><highlight class="normal">_n;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eosio::datastream&lt;size_t&gt;<sp/>output_size_ds;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_size_ds<sp/>&lt;&lt;<sp/>output;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_action.data.resize(output_size_ds.tellp());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eosio::datastream&lt;char*&gt;<sp/>output_ds(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(return_action.data.data()),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_action.data.size());</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_ds<sp/>&lt;&lt;<sp/>output;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_action.send();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;abort&quot;</highlight><highlight class="normal">_n.value)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eosio::check(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>0ull);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="system/contracts/test_contracts/blockinfo_tester/src/blockinfo_tester.cpp"/>
  </compounddef>
</doxygen>
