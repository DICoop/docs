<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="ru">
  <compounddef id="counts_8hpp" kind="file" language="C++">
    <compoundname>counts.hpp</compoundname>
    <includedby refid="gateway_8hpp" local="yes">gateway/gateway.hpp</includedby>
    <includedby refid="marketplace_8hpp" local="yes">marketplace/marketplace.hpp</includedby>
    <includedby refid="soviet_8hpp" local="yes">soviet/soviet.hpp</includedby>
    <invincdepgraph>
      <node id="1">
        <label>common/counts.hpp</label>
        <link refid="counts_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>gateway/gateway.cpp</label>
        <link refid="gateway_8cpp"/>
      </node>
      <node id="2">
        <label>gateway/gateway.hpp</label>
        <link refid="gateway_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>marketplace/marketplace.cpp</label>
        <link refid="marketplace_2marketplace_8cpp"/>
      </node>
      <node id="4">
        <label>marketplace/marketplace.hpp</label>
        <link refid="marketplace_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>soviet/soviet.cpp</label>
        <link refid="soviet_2soviet_8cpp"/>
      </node>
      <node id="6">
        <label>soviet/soviet.hpp</label>
        <link refid="soviet_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structcounts__base" prot="public">counts_base</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="counts_8hpp_1a5af27e8af61127ac08bf8af64f4e4766" prot="public" static="no">
        <type>eosio::multi_index&lt; &quot;counts&quot;_n, <ref refid="structcounts__base" kindref="compound">counts_base</ref>, eosio::indexed_by&lt;&quot;keyskey&quot;_n, eosio::const_mem_fun&lt; <ref refid="structcounts__base" kindref="compound">counts_base</ref>, uint128_t, &amp;<ref refid="structcounts__base_1acabcbd93c1b35dca98c77646bbfda21d" kindref="member">counts_base::keyskey</ref> &gt; &gt; &gt;</type>
        <definition>typedef eosio::multi_index&lt; &quot;counts&quot;_n, counts_base, eosio::indexed_by&lt;&quot;keyskey&quot;_n, eosio::const_mem_fun&lt;counts_base, uint128_t, &amp;counts_base::keyskey&gt; &gt; &gt; counts_index</definition>
        <argsstring></argsstring>
        <name>counts_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/counts.hpp" line="23" column="5" bodyfile="common/counts.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="counts_8hpp_1ac5a56feb4e32856beed484ddddf4a3b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t get_id</definition>
        <argsstring>(eosio::name code, eosio::name scope, eosio::name key)</argsstring>
        <name>get_id</name>
        <param>
          <type>eosio::name</type>
          <declname>code</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/counts.hpp" line="26" column="10" bodyfile="common/counts.hpp" bodystart="26" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="counts_8hpp_1aeb06beaf4402f0222167ef9d12eacd5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t get_global_id</definition>
        <argsstring>(eosio::name _me, eosio::name key)</argsstring>
        <name>get_global_id</name>
        <param>
          <type>eosio::name</type>
          <declname>_me</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/counts.hpp" line="44" column="10" bodyfile="common/counts.hpp" bodystart="44" bodyend="60"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="structcounts__base" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcounts__base" kindref="compound">counts_base</ref><sp/>{</highlight></codeline>
<codeline lineno="2" refid="structcounts__base_1a190877bf5f40a7a357007574c5ecc1d7" refkind="member"><highlight class="normal"><sp/><sp/>eosio::name<sp/><ref refid="structcounts__base_1a190877bf5f40a7a357007574c5ecc1d7" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="3" refid="structcounts__base_1a54989b6bb7004b9dce497350707fce21" refkind="member"><highlight class="normal"><sp/><sp/>eosio::name<sp/><ref refid="structcounts__base_1a54989b6bb7004b9dce497350707fce21" kindref="member">secondary_key</ref>;</highlight></codeline>
<codeline lineno="4" refid="structcounts__base_1a7e8ded653625d24a13ae3b651c42dd5a" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="structcounts__base_1a7e8ded653625d24a13ae3b651c42dd5a" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="structcounts__base_1a776ade72cbcce230ac5dd0c5d45b3578" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="structcounts__base_1a776ade72cbcce230ac5dd0c5d45b3578" kindref="member">primary_key</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcounts__base_1a190877bf5f40a7a357007574c5ecc1d7" kindref="member">key</ref>.value;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="9" refid="structcounts__base_1acabcbd93c1b35dca98c77646bbfda21d" refkind="member"><highlight class="normal"><sp/><sp/>uint128_t<sp/><ref refid="structcounts__base_1acabcbd93c1b35dca98c77646bbfda21d" kindref="member">keyskey</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="utils_8hpp_1a9674246df019d9c71da6884b1fd0fe39" kindref="member">combine_ids</ref>(<ref refid="structcounts__base_1a190877bf5f40a7a357007574c5ecc1d7" kindref="member">key</ref>.value,<sp/><ref refid="structcounts__base_1a54989b6bb7004b9dce497350707fce21" kindref="member">secondary_key</ref>.value);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="13" refid="structcounts__base_1a79af91982641a07988d9cf8f01dc1fd1" refkind="member"><highlight class="normal"><sp/><sp/>uint128_t<sp/><ref refid="structcounts__base_1a79af91982641a07988d9cf8f01dc1fd1" kindref="member">keyvalue</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="utils_8hpp_1a9674246df019d9c71da6884b1fd0fe39" kindref="member">combine_ids</ref>(<ref refid="structcounts__base_1a190877bf5f40a7a357007574c5ecc1d7" kindref="member">key</ref>.value,<sp/><ref refid="structcounts__base_1a7e8ded653625d24a13ae3b651c42dd5a" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal">};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>eosio::multi_index&lt;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;counts&quot;</highlight><highlight class="normal">_n,<sp/><ref refid="structcounts__base" kindref="compound">counts_base</ref>,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::indexed_by&lt;</highlight><highlight class="stringliteral">&quot;keyskey&quot;</highlight><highlight class="normal">_n,<sp/>eosio::const_mem_fun&lt;<ref refid="structcounts__base" kindref="compound">counts_base</ref>,<sp/>uint128_t,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structcounts__base_1acabcbd93c1b35dca98c77646bbfda21d" kindref="member">counts_base::keyskey</ref>&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="23" refid="counts_8hpp_1a5af27e8af61127ac08bf8af64f4e4766" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="counts_8hpp_1a5af27e8af61127ac08bf8af64f4e4766" kindref="member">counts_index</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="counts_8hpp_1ac5a56feb4e32856beed484ddddf4a3b8" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="counts_8hpp_1ac5a56feb4e32856beed484ddddf4a3b8" kindref="member">get_id</ref>(eosio::name<sp/>code,<sp/>eosio::name<sp/>scope,<sp/>eosio::name<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="counts_8hpp_1a5af27e8af61127ac08bf8af64f4e4766" kindref="member">counts_index</ref><sp/><ref refid="structcounts" kindref="compound">counts</ref>(code,<sp/>scope.value);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count<sp/>=<sp/><ref refid="structcounts" kindref="compound">counts</ref>.find(key.value);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/><ref refid="structcounts" kindref="compound">counts</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcounts" kindref="compound">counts</ref>.emplace(code,<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.key<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.value<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>count-&gt;<ref refid="structcounts__base_1a7e8ded653625d24a13ae3b651c42dd5a" kindref="member">value</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcounts" kindref="compound">counts</ref>.modify(count,<sp/>code,<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c)<sp/>{<sp/>c.value<sp/>=<sp/>id;<sp/>});</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="counts_8hpp_1aeb06beaf4402f0222167ef9d12eacd5c" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="counts_8hpp_1aeb06beaf4402f0222167ef9d12eacd5c" kindref="member">get_global_id</ref>(eosio::name<sp/>_me,<sp/>eosio::name<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="counts_8hpp_1a5af27e8af61127ac08bf8af64f4e4766" kindref="member">counts_index</ref><sp/><ref refid="structcounts" kindref="compound">counts</ref>(_me,<sp/>_me.value);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count<sp/>=<sp/><ref refid="structcounts" kindref="compound">counts</ref>.find(key.value);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/><ref refid="structcounts" kindref="compound">counts</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcounts" kindref="compound">counts</ref>.emplace(_me,<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.key<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.value<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>count-&gt;<ref refid="structcounts__base_1a7e8ded653625d24a13ae3b651c42dd5a" kindref="member">value</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcounts" kindref="compound">counts</ref>.modify(count,<sp/>_me,<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c)<sp/>{<sp/>c.value<sp/>=<sp/>id;<sp/>});</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="common/counts.hpp"/>
  </compounddef>
</doxygen>
