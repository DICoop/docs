<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="ru">
  <compounddef id="classsendinline" kind="class" language="C++" prot="public">
    <compoundname>sendinline</compoundname>
    <basecompoundref prot="public" virt="non-virtual">eosio::contract</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsendinline_1a9302e043cf61d0320016d60788389ac8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sendinline::send</definition>
        <argsstring>(eosio::name contract, eosio::name action_name, std::vector&lt; eosio::permission_level &gt; auths, std::vector&lt; char &gt; payload)</argsstring>
        <name>send</name>
        <qualifiedname>sendinline::send</qualifiedname>
        <param>
          <type>eosio::name</type>
          <declname>contract</declname>
        </param>
        <param>
          <type>eosio::name</type>
          <declname>action_name</declname>
        </param>
        <param>
          <type>std::vector&lt; eosio::permission_level &gt;</type>
          <declname>auths</declname>
        </param>
        <param>
          <type>std::vector&lt; char &gt;</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="system/contracts/test_contracts/sendinline/src/sendinline.cpp" line="17" column="9" bodyfile="system/contracts/test_contracts/sendinline/src/sendinline.cpp" bodystart="17" bodyend="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><computeroutput>eosio.code</computeroutput> is a virtual permission (there is no private or public key associated with it). Therefore, this test tests how <computeroutput>eosio.msig</computeroutput> contract reacts to a smart contract submitting a proposal and approving/unnapproving itself. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>eosio::contract</label>
      </node>
      <node id="1">
        <label>sendinline</label>
        <link refid="classsendinline"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>eosio::contract</label>
      </node>
      <node id="1">
        <label>sendinline</label>
        <link refid="classsendinline"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="system/contracts/test_contracts/sendinline/src/sendinline.cpp" line="11" column="1" bodyfile="system/contracts/test_contracts/sendinline/src/sendinline.cpp" bodystart="12" bodyend="25"/>
    <listofallmembers>
      <member refid="classsendinline_1a9302e043cf61d0320016d60788389ac8" prot="public" virt="non-virtual"><scope>sendinline</scope><name>send</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
